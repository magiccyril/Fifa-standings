<?php

namespace Divona\StandingsBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\Common\Collections\ArrayCollection;
use Divona\StandingsBundle\Entity\Standing;

/**
 * GameRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GameRepository extends EntityRepository
{
    public function getGamesForUser($userId)
    {
        $qb = $this->createQueryBuilder('g')
            ->select('g')
            ->where('g.player1 = :user_id')
            ->orWhere('g.player2 = :user_id')
            ->addOrderBy('g.created_at')
            ->setParameter('user_id', $userId);

        return $qb->getQuery()
            ->getResult();
    }

    public function getGames($from_date = null)
    {
        if (!$from_date)
        {
            $from_date = new \DateTime();
        }
        $qb = $this->createQueryBuilder('g')
            ->select('g, p1, p2')
            ->leftJoin('g.player1', 'p1')
            ->leftJoin('g.player2', 'p2')
            ->where('g.created_at >= :date')
            ->addOrderBy('g.created_at')
            ->setParameter('date', $from_date);

        return $qb->getQuery()
            ->getResult();
    }

    public function getStanding($display = null)
    {
        $from_date = new \DateTime();
        switch ($display)
        {
            case 'day':
                $from_date->sub( new \DateInterval('P1D'));
                break;
            case 'week':
                $from_date->sub( new \DateInterval('P1W'));
                break;
            case 'year':
                $from_date->sub( new \DateInterval('P1Y'));
                break;
            case 'month':
                $from_date->sub( new \DateInterval('P1M'));
                break;
            case 'all':
            default:
                $from_date->setDate(1970, 1, 1);
                break;
        }

        // get all games.
        $games = $this->getGames($from_date);

        // create the standing.
        $standing = new Standing();
        // add games.
        foreach ($games as $i => &$game)
        {
            $standing->addPlayerGame($game->getPlayer1(), $game->getScorePlayer1(), $game->getScorePlayer2());
            $standing->addPlayerGame($game->getPlayer2(), $game->getScorePlayer2(), $game->getScorePlayer1());
        }
        // sort the standing.
        $standing->sort();

        return $standing;
    }
}